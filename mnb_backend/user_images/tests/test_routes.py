# Generated by CodiumAI

import unittest
from io import BytesIO

from flask_jwt_extended import create_access_token

from mnb_backend import app
from mnb_backend.database import db
from mnb_backend.enums import UserStatusEnums
from mnb_backend.users.models import User
from mnb_backend.user_images.models import UserImage
from mnb_backend.user_images.tests.setup import UserModelTestCase

"""
Code Analysis

Objective:
The objective of the 'add_user_image' function is to add a user image to the database and return data about the new user image in JSON format.

Inputs:
- JWT token for authentication
- 'profile_image' file uploaded by the user

Flow:
1. Get the current user ID from the JWT token.
2. Retrieve the 'profile_image' file uploaded by the user.
3. Upload the image to the MNB image_bucket of AWS using the 'aws_upload_image' function.
4. Add the user image to the database using the 'db_add_user_image' function.
5. Retrieve the newly added user image from the database.
6. Serialize the user image data and return it in JSON format with a 201 status code.

Outputs:
- JSON data containing information about the newly added user image, including the user image ID, image URL, and user ID.
- Error message in JSON format if the image upload or database insertion fails.

Additional aspects:
- The function is decorated with the '@user_images_routes.post("/")' and '@jwt_required()' decorators to specify the route and authentication requirements.
- The function returns a 424 status code if the image upload fails, and a 401 status code if the database insertion fails.
- The function uses the 'get_jwt_identity' function to retrieve the current user ID from the JWT token.
- The function uses the 'request.files.get' method to retrieve the uploaded 'profile_image' file from the request.
"""


class TestAddUserImage(UserModelTestCase):
    #  Tests that a user can successfully upload a profile image and receive a JSON response with the user image data.
    def test_add_user_image_success(self):
        """Tests that a user can successfully upload a profile image and receive a JSON response with the user image
        data."""

        # create a test user
        u1 = db.session.get(User, self.u1_id)

        # log in as the test user
        access_token = create_access_token(identity=u1.id)

        # create a test image file
        test_image = BytesIO(b"test image data")
        test_image.name = "test_image.jpg"

        # make a request to add the user image
        with app.test_client() as client:
            response = client.post("/api/user_images/", headers={"Authorization": f"Bearer {access_token}"},
                                   data={"profile_image": test_image})

            # check that the response is successful and contains the expected data
            self.assertEqual(response.status_code, 201)
            self.assertIn("user_image", response.json)
            self.assertIn("id", response.json["user_image"])
            self.assertIn("image_url", response.json["user_image"])
            self.assertIn("user_id", response.json["user_image"])

    #  Tests that an unauthenticated user cannot upload a profile image and receives an error response.
    def test_add_user_image_unauthenticated(self):
        """Tests that an unauthenticated user cannot upload a profile image and receives an error response."""

        # create a test image file
        test_image = BytesIO(b"test image data")
        test_image.name = "test_image.jpg"

        # make a request to add the user image without authentication
        with app.test_client() as client:
            response = client.post("/api/user_images/", data={"profile_image": test_image})

            # check that the response is unsuccessful and contains the expected error message
            self.assertEqual(response.status_code, 401)
            self.assertEqual(response.json["msg"], "Missing Authorization Header")


class TestGetCurrentUserImage(UserModelTestCase):
    def test_get_current_user_image_happy(self):
        # create a test user
        u1 = db.session.get(User, self.u1_id)

        # log in as the test user
        access_token = create_access_token(identity=u1.id)

        # create a test image file
        test_image = BytesIO(b"test image data")
        test_image.name = "test_image.jpg"

        # make a request to add the user image
        with app.test_client() as client:
            image_created = client.post("/api/user_images/", headers={"Authorization": f"Bearer {access_token}"}, data={"profile_image": test_image})

            response = client.get("/api/user_images/current/", headers={"Authorization": f"Bearer {access_token}"})

            # check that the response is successful and contains the expected data
            self.assertEqual(response.status_code, 200)
            self.assertIn("user_image", response.json)
            self.assertIn("id", response.json["user_image"])
            self.assertIn("image_url", response.json["user_image"])
            self.assertIn("user_id", response.json["user_image"])
